
********************************************************************
*****	 		epoll_wait			       *****
********************************************************************
epoll_wait系统调用的入口函数既为YSCALL_DEFINE4(epoll_wait, ......

YSCALL_DEFINE4(epoll_wait, int, epfd, struct epoll_event __user *, events,
		int, maxevents, int, timeout)
{
	......	
	判断传递进来的epfd是否是epoll_create函数创建的, epoll_wait只处理epoll_create创建的.
	if (!is_file_epoll(file))
		goto error_fput;	
	
	接下来调用ep_poll函数.
	ep_poll(ep, events, maxevents, timeout)

	......
}


static int ep_poll(struct eventpoll *ep, struct epoll_event __user *events,
		   int maxevents, long timeout)
{
	......

	将wait(wait_queue_t结构)加入到eventpoll的wq链表元素上, 主要在内核唤醒时使用
	__add_wait_queue(&ep->wq, &wait)

	for (;;) {

		设置当前睡眠的task_struct 可以被打断
		set_current_state(TASK_INTERRUPTIBLE);

		如果当前eventpoll事件上的监听事件已经就绪或者监听已经超时,
		则跳出循环.
		ep->rdllist的就绪节点是内核在数据到来时,执行触发的时候加入的.
		if (!list_empty(&ep->rdllist) || !jtimeout)
			break;

		检查是否有信号需要处理
		if (signal_pending(current)) {
			res = -EINTR;
			break;
		}

		进入延时唤醒状态, 让出cpu, 同时会对jtimeout进行减法操作.
		jtimeout = schedule_timeout(jtimeout);
	}	

	事件来临时, 跳出for(;;)循环后从链表上删除wait
	__remove_wait_queue(&ep->wq, &wait);

	......

	epoll_wait进程唤醒后, 设置task标记为running态
	set_current_state(TASK_RUNNING);

	调用ep_send_events函数,将就绪的event拷贝到用户态的events数组中来. 
	返回的时数据就绪的event事件数.
	res = ep_send_events(ep, events, maxevents)
	return res;
}


static int ep_send_events(struct eventpoll *ep,
			  struct epoll_event __user *events, int maxevents)
{
	struct ep_send_events_data esed;
	esed.maxevents = maxevents;
	esed.events = events;
	调用 ep_scan_ready_list函数
	return ep_scan_ready_list(ep, ep_send_events_proc, &esed);
}


static int ep_scan_ready_list(struct eventpoll *ep,
			      int (*sproc)(struct eventpoll *,
					   struct list_head *, void *),
			      void *priv)
{
	将就绪事件的链表转移给txlist.
	list_splice_init(&ep->rdllist, &txlist);

	......

	将ep的ovflist从初始化的EP_UNACTIVE_PTR变为NULL.
	因为在sproc函数调用中要对rdllist链表进行遍历, 
	并实现从内核态向用户态的拷贝操作,更改ovflist的值,
	并配合内核触发部分,实现类似锁的保护.
	ep->ovflist = NULL;

	执行sproc传入的回调函数, 既调用ep_send_events_proc函数, 在下面进行了该函数分析.
	error = (*sproc)(ep, &txlist, priv)

	当执行sproc进行内核态向用户态的拷贝时, ep的rdllist链表是不允许插入的.
	此时内核触发部分会将满足条件的epi事件插入到ovflist中.
	下面则是将ovflist链表上的部分加入到eventpoll的rdllist上,并做稍后处理.
	for (nepi = ep->ovflist; (epi = nepi) != NULL;
	     nepi = epi->next, epi->next = EP_UNACTIVE_PTR) {
		if (!ep_is_linked(&epi->rdllink))
			list_add_tail(&epi->rdllink, &ep->rdllist);
	}	

	拷贝操作结束, 将ep->ovflist的值还原为初始化值
	ep->ovflist = EP_UNACTIVE_PTR;

	将sproc中未完全剥离的剩余链表上的epi事件加入到rdllist上.
	list_splice(&txlist, &ep->rdllist);

	如果ep->rdllist上还有节点数据, 有可能是ovflist上拷贝过来的,
	有可能是txlist上剩余的, 也有可能是使用LT模式重新挂载过来的等,
	则进行进程唤醒操作, 既让epoll_wait重新执行起来,将rdllist上的数据进行及时处理.	
	if (!list_empty(&ep->rdllist)) {
		if (waitqueue_active(&ep->wq))
			wake_up_locked(&ep->wq);
		......
	}	

	......
}

tatic int ep_send_events_proc(struct eventpoll *ep, struct list_head *head,
			       void *priv)
{
	其中priv指向了传递进来的struct ep_send_events_data结构.
	......

	遍历head链表, 将就绪的事件以此拷贝到esed结构中.
	for (eventcnt = 0, uevent = esed->events;
	     !list_empty(head) && eventcnt < esed->maxevents;) {

		从链表上依次取下每个节点结构
		epi = list_first_entry(head, struct epitem, rdllink);

		将该节点从链表上进行剥离
		list_del_init(&epi->rdllink);

		返回当前套接字的event状态, 此处不进行具体分析.
		在epoll_ctl函数中也调用了poll函数.
		revents = epi->ffd.file->f_op->poll(epi->ffd.file, NULL) &
			epi->event.events;

		if (revents) {
			如果从内核态向用户态拷贝失败, 则将剥离下来的epi事件重新加入到txlist中.
			if (__put_user(revents, &uevent->events) ||
			    __put_user(epi->event.data, &uevent->data)) {
				list_add(&epi->rdllink, head);
				return eventcnt ? eventcnt : -EFAULT;
			}
			eventcnt++;
			uevent++;
			
			当监听的event事件类型中加入了EPOLLONESHOT态, 
			既除去了EPOLLIN或者EPOLLOUT等基本类型, 内核就不会进行第二次触发.
			相见内核触发分析.
			if (epi->event.events & EPOLLONESHOT)
				epi->event.events &= EP_PRIVATE_BITS;

			当监听的event事件类型中没有加入EPOLLET类型,
			则将该事件继续添加到ep的rdllist中.
			else if (!(epi->event.events & EPOLLET)) {
				list_add_tail(&epi->rdllink, &ep->rdllist);
			}
		}	
	}

	......
}



